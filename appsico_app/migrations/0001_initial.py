# Generated by Django 5.1.3 on 2024-12-08 21:38

import appsico_app.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import re
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_psicologist', models.BooleanField(default=False)),
                ('is_patient', models.BooleanField(default=False)),
                ('is_receptionist', models.BooleanField(default=False)),
                ('user_name', models.CharField(help_text='Insira seu nome completo. Ex.: João Santos Silva', max_length=30, validators=[django.core.validators.RegexValidator(re.compile(''), 'Insira um nome válido', 'Inválido')], verbose_name='Nome')),
                ('cpf', models.CharField(help_text='XXX.XXX.XXX-XX', max_length=30, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^(?:[0-9]{3}[\\.|-]){3}[0-9]{2}$'), 'Insira um número válido', 'Inválido')], verbose_name='CPF')),
                ('phonenumber', models.CharField(help_text='Ex.: (XX)XXXX-XXXX', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^\\([0-9]{2}\\)[0-9]{4,5}-[0-9]{4}$'), 'Insira um número válido', 'Inválido')], verbose_name='Número de telefone')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Doctors',
            fields=[
                ('customuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('crp', models.CharField(help_text='XX/XXXXXX', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[0-9]{2}\\/[0-9]{6}$'), 'Insira um número válido', 'Inválido')], verbose_name='CRP')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='doctors_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Psicólogo',
                'verbose_name_plural': 'Psicólogos',
            },
            bases=('appsico_app.customuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Patients',
            fields=[
                ('customuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('address', models.CharField(help_text='Ex.: Rua/Av. XXX, NºXX, Complemento (se houver) - Bairro, Cidade, Estado - CEP', max_length=30, unique=True, verbose_name='Endereço')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patients_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Paciente',
                'verbose_name_plural': 'Pacientes',
            },
            bases=('appsico_app.customuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Medical_Record',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record', models.TextField(verbose_name='Relatório')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Data de criação da entrada no prontuário', verbose_name='Criado em: ')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appsico_app.doctors')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appsico_app.patients')),
            ],
            options={
                'verbose_name': 'Prontuário',
                'verbose_name_plural': 'Prontuários',
            },
        ),
        migrations.CreateModel(
            name='Finance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transactions_status', models.CharField(choices=[(appsico_app.models.TRANSACTIONS_STATUS['PAYED'], 'Processo finalizado: Pago.'), (appsico_app.models.TRANSACTIONS_STATUS['IN_PAYMENT'], 'Boleto gerado e enviado para pagamento'), (appsico_app.models.TRANSACTIONS_STATUS['START_PROCESS'], 'Boleto a ser gerado')], help_text='Como estão as Transações', max_length=80, verbose_name='Transações')),
                ('user_cpf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appsico_app.patients')),
            ],
            options={
                'verbose_name': 'Finança',
                'verbose_name_plural': 'Finanças',
            },
        ),
        migrations.AddField(
            model_name='doctors',
            name='patient_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appsico_app.patients'),
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.DurationField()),
                ('data', models.DateTimeField()),
                ('cpf_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appsico_app.patients')),
            ],
            options={
                'verbose_name': 'Calendário',
                'verbose_name_plural': 'Calendários',
            },
        ),
        migrations.CreateModel(
            name='Receptionist',
            fields=[
                ('customuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='receptionist_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recepcção',
                'verbose_name_plural': 'Recepção',
            },
            bases=('appsico_app.customuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
